fromJSON(tmp[1,])
tmp[1,]
?fromJSON
tmp2<-fromJSON(file=paste(folder.data,user.file,sep=""))
head(tmp2)
tmp2$name
fromJSON(tmp[1,])
tmp2<-tmp1[1,]
tmp2<-tmp[1,]
class(tmp2)
fromJSON(json_str = tmp2)
fromJSON(json_str = as.character(tmp2)
)
tmp2<-sapply(1:user.no, function(x)
{print(x);with(fromJSON(as.character(tmp[x,])),
data.frame(name=name,funny=votes$funny,fans=fans))})
con<-file(paste(folder.data,user.file,sep=""),"r")
system.time(
user.funny_user_fans<-sapply(1:user.no,function(x){
print(x);
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans))
})
)
close(con)
user.funny_user_fans<-do.call(rbind,user.funny_user_fans)
summary(user.funny_user_fans)
head(user.funny_user_fans)
con<-file(paste(folder.data,user.file,sep=""),"r")
system.time(
user.funny_user_fans<-sapply(1:user.no,function(x){
print(x);
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans))
})
)
close(con)
View(tmp)
library(plyr)
user.funny_user_fans_clean<-do.call(rrbind.fill,user.funny_user_fans)
user.funny_user_fans_clean<-do.call(rbind.fill,user.funny_user_fans)
head(user.funny_user_fans_clean)
length(user.funny_user_fans)
dim(user.funny_user_fans)
(user.funny_user_fans[3,1:10])
user.funny_user_fans[1]
user.funny_user_fans[[1]]
user.funny_user_fans[[2]]
user.funny_user_fans[1]
user.funny_user_fans[2]
user.funny_user_fans[3]
user.funny_user_fans[4]
user.funny_user_fans[5]
user.funny_user_fans[1]
close(con)
con<-file(paste(folder.data,user.file,sep=""),"r")
with(fromJSON(readLines(con,1)),data.frame(name=name,funny=votes$funny,fans=fans))
with(fromJSON(readLines(con,1)),data.frame(name=name,funny=votes$funny,fans=fans))
with(fromJSON(readLines(con,1)),data.frame(name=name,funny=votes$funny,fans=fans))
user.funny_user_fans<-data.frame(names=character(user.no),
funny = numeric(user.no),
fans = numeric(user.no),
stringsAsFactors = F)
close(con)
con<-file(paste(folder.data,user.file,sep=""),"r")
user.funny_user_fans<-data.frame(name=character(user.no),
funny = numeric(user.no),
fans = numeric(user.no),
stringsAsFactors = F)
?with
for(i in 1:user.no){
print(i)
with(fromJSON(readLines(con,1)), {
user.funny_user_fans$name[i]<-name
user.funny_user_fans$funny[i]<-funny
user.funny_user_fans$fans[i]<-fans
})
}
con<-file(paste(folder.data,user.file,sep=""),"r")
for(i in 1:user.no){
print(i)
with(fromJSON(readLines(con,1)), {
user.funny_user_fans$name[i]<-name
user.funny_user_fans$funny[i]<-funny
user.funny_user_fans$fans[i]<-fans
})
}
close(con)
con<-file(paste(folder.data,user.file,sep=""),"r")
for(i in 1:user.no){
print(i)
with(fromJSON(readLines(con,1)), {
user.funny_user_fans$name[i]<-name
user.funny_user_fans$funny[i]<-votes$funny
user.funny_user_fans$fans[i]<-fans
})
}
close(con)
con<-file(paste(folder.data,user.file,sep=""),"r")
system.time(
user.funny_user_fans<-sapply(1:user.no,function(x){
print(x);
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans))
})
)
close(con)
system.time(
user.funny_user_fans<-sapply(1:100,function(x){ #user.no
print(x);
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans))
})
)
con<-file(paste(folder.data,user.file,sep=""),"r")
system.time(
user.funny_user_fans<-sapply(1:100,function(x){ #user.no
print(x);
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans))
})
)
user.funny_user_fans[1]
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans))
user.funny_user_fans<-lapply(1:100,function(x){ #user.no
print(x);
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans))
})
user.funny_user_fans[1]
user.funny_user_fans[2]
user.funny_user_fans_clean<-do.call(rbind.fill,user.funny_user_fans)
head(user.funny_user_fans_clean)
con<-file(paste(folder.data,user.file,sep=""),"r")
system.time(
user.funny_user_fans<-lapply(1:user.no,function(x){ #user.no
print(x);
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans))
})
)
user.funny_user_fans_clean<-do.call(rbind.fill,user.funny_user_fans)
user.funny_user_fans_clean<-do.call(rbind,user.funny_user_fans)
user.funny_user_fans_clean<-data.frame(name=character(user.no),
funny = numeric(user.no),
fans = numeric(user.no),
stringsAsFactors = F)
user.funny_user_fans[1]
sapply(1:user.no, function(x) user.funny_user_fans_clean[x,]<- user.funny_user_fans[[x]])
system.time(for(i in 1:user.no){
print(i)
user.funny_user_fans_clean[i,]<-user.funny_user_fans[[i]])
}
system.time(for(i in 1:user.no){
print(i)
user.funny_user_fans_clean[i,]<-user.funny_user_fans[[i]]
})
system.time(do.call(rbind,user.funny_user_fans[1:100]))
system.time(do.call(rbind,user.funny_user_fans[1:100]))*user.no/100
system.time(do.call(rbind.data.frame,user.funny_user_fans[1:100]))*user.no/100
system.time(do.call(rbind.data.frame,user.funny_user_fans[1:1000]))*user.no/1000
system.time(do.call(rbind.data.frame,user.funny_user_fans[1:10000]))*user.no/10000
system.time(unlist(user.funny_user_fans[1:10000]))*user.no/10000
unlist(user.funny_user_fans[1:10])
data.frame(matrix(unlist(user.funny_user_fans[1:10]),nrow = 10,byrow = T),stringsAsFactors = F)
unlist
data.frame(matrix(unlist(user.funny_user_fans[1:10],recursive = F),nrow = 10,byrow = T),stringsAsFactors = F)
unlist
user.funny_user[[1]]
user.funny_user[1]
user.funny_user_fans[[1]]
user.funny_user_fans[[1]]$name
close(con)
con<-file(paste(folder.data,user.file,sep=""),"r")
system.time(
user.funny_user_fans<-lapply(1:user.no,function(x){ #user.no
print(x);
with(fromJSON(readLines(con,1)),
data.frame(name=name,funny=votes$funny,fans=fans,
stringsAsFactors = F))
})
)
unlist(user.funny_user_fans[1:10])
data.frame(matrix(unlist(user.funny_user_fans[1:10]),nrow = 10,byrow = T),stringsAsFactors = F)
system.time(data.frame(matrix(unlist(
user.funny_user_fans[1:10]),nrow = 10,byrow = T),stringsAsFactors = F))
system.time(data.frame(matrix(unlist(
user.funny_user_fans[1:10000]),nrow = 10000,byrow = T),stringsAsFactors = F))*user.no/10000
user.funny_user_fans_clean<-data.frame(matrix(unlist(
user.funny_user_fans),nrow = user.no,byrow = T),stringsAsFactors = F)
head(user.funny_user_fans_clean)
rm("user.funny_user_fans")
?rm
ls()
rm(list("tmp3","tmp","tmp2","u","con","food","parser","i"))
rm(c("tmp3","tmp","tmp2","u","con","food","parser","i"))
rm(list = c("tmp3","tmp","tmp2","u","con","food","parser","i"))
dir()
ls()
rm(list=c("sample_json"))
summary(user.funny_user_fans_clean)
head(user.funny_user_fans_clean)
names(user.funny_user_fans_clean)<-c("name","funny","fans")
head(user.funny_user_fans_clean)
?table
with(airquality, table(cut(Temp, quantile(Temp)), Month))
with(user.funny_user_fans_clean,table(fans>1))
with(user.funny_user_fans_clean,table(fans>1,funny>1))
user.fans_funny_tab<-with(user.funny_user_fans_clean,table(fans>1,funny>1))
user.fans_funny_tab
sum(user.fans_funny_tab[1,])
?fisher.test
sum(user.funny_user_fans_clean$fans<1)
sum(user.funny_user_fans_clean$fans==0)
sum(user.funny_user_fans_clean$funny==0)
fisher.test(user.fans_funny_tab)
user.fans_funny_tab
user.fans_funny_tab/user.no
fisher.test(user.fans_funny_tab/user.no)
TeaTasting <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
TeaTasting
fisher.test(TeaTasting, alternative = "greater")
fisher.test(TeaTasting)
save.image(file="qz1.RData")
s
1.06*(avg_intons-1+.5)
avg_intons <- 8.7
s.non_last <- 3.3;s.last <- 1.65 # kb/splice
1.06*(avg_intons-1+.5)
1.06*(avg_intons-1+.5)/avg_intons
exons.length<- c(.1,.1,.1,.1) #kb
introns.length<-c(1,1,1)# kb
introns.no<-length(introns.length);exons.no <- length(exons.length)
mRNA.length <- sum(exons.length,introns.length)
intons.length_to_3p<- introns.length+exons.length[-1]
intons.length_to_3p<- cumsum(introns.length+exons.length[-1])
?ode
??ode
introns.length_to_end <- mRNA.length-introns.length_to_3p
introns.length_to_3p<- cumsum(introns.length+exons.length[-1])
introns.length_to_end <- mRNA.length-introns.length_to_3p
# parameters
k.elong<-3 #kb/min
k.s <- 0.7
k.init <- 6 # #/mins
source(file="model_v1.R")
Tau_introns <- introns.length_to_end/k.elong #splicing period
pfunc<- function(t) 1-exp(-k.s*t) # prob spliced at time t
psi_pred<-sapply(Tau_introns, function(x) 1-pfunc(x))
cell_no <- 100; mRNA_no <- 20
runs<-lapply(as.list(1:cell_no), function(x) runModel(mRNA_no))
all_tpoints<- unlist(lapply(as.list(1:cell_no), function(x)runs[[x]][[1]]$ts))
all_tpoints<-sort(unique(all_tpoints))
mRNA.all_cells <- lapply(as.list(1:cell_no),function(x) runs[[x]][[1]])
Itron1.all_cells <- lapply(as.list(1:cell_no),function(x) runs[[x]][[2]][[1]])
Itron2.all_cells <- lapply(as.list(1:cell_no),function(x) runs[[x]][[2]][[2]])
Itron3.all_cells <- lapply(as.list(1:cell_no),function(x) runs[[x]][[2]][[3]])
mRNA.all_cells <- lapply(as.list(1:cell_no), function(x)
mixTs_dataFrame(df1=as.data.frame(mRNA.all_cells[[x]]),all_tpoints)$val)
Itron1.all_cells <- lapply(as.list(1:cell_no), function(x)
mixTs_dataFrame(df1=as.data.frame(Itron1.all_cells[[x]]),all_tpoints)$val)
Itron2.all_cells <- lapply(as.list(1:cell_no), function(x)
mixTs_dataFrame(df1=as.data.frame(Itron2.all_cells[[x]]),all_tpoints)$val)
Itron3.all_cells <- lapply(as.list(1:cell_no), function(x)
mixTs_dataFrame(df1=as.data.frame(Itron3.all_cells[[x]]),all_tpoints)$val)
mRNA.mean <- rowMeans(matrix(unlist(mRNA.all_cells),ncol = cell_no))
Itron1.mean <- rowMeans(matrix(unlist(Itron1.all_cells),ncol = cell_no))
Itron2.mean <- rowMeans(matrix(unlist(Itron2.all_cells),ncol = cell_no))
Itron3.mean <- rowMeans(matrix(unlist(Itron3.all_cells),ncol = cell_no))
plot(c(0,max(all_tpoints)),c(0,mRNA_no),type = "n",xlab="Time (mins)", ylab="Reads",
main=paste("Single cell vs. average,cell no=",cell_no))
invisible(sapply(1:cell_no, function(x) lines(all_tpoints,mRNA.all_cells[[x]],
col=gray(.2),lwd=.5)))
invisible(sapply(1:cell_no, function(x) lines(all_tpoints,Itron1.all_cells[[x]],
col="pink",lwd=.5)))
invisible(sapply(1:cell_no, function(x) lines(all_tpoints,Itron2.all_cells[[x]],
col="darkseagreen1",lwd=.5)))
invisible(sapply(1:cell_no, function(x) lines(all_tpoints,Itron3.all_cells[[x]],
col="lightskyblue",lwd=.5)))
lines(all_tpoints,mRNA.mean,lwd=3)
lines(all_tpoints,Itron1.mean,col=2,lwd=3)
lines(all_tpoints,Itron2.mean,col=3,lwd=3)
lines(all_tpoints,Itron3.mean,col=4,lwd=3)
for(i in 1:3) points(all_tpoints[length(all_tpoints)],psi_pred[i]*mRNA_no,cex=2,col=i+1,pch=16)
legend(0,20,legend = c("mRNA mean","Intron1 mean","predicted Intron1"),lty=c(1,1,NA),col=c(1,2,2),pch=c(NA,NA,16))
#abline(-mRNA.length/k.elong*k.init,k.init,lty=2,col=4,lwd=2)
#abline(-mRNA.length/k.elong*(1/k.init+mRNA.length/k.elong),1/(1/k.init+mRNA.length/k.elong),lty=2,col=3,lwd=2)
# gene structure
exons.length<- c(.1,.1,.1,.1) #kb
introns.length<-c(1,1,1)# kb
introns.no<-length(introns.length);exons.no <- length(exons.length)
mRNA.length <- sum(exons.length,introns.length)
introns.length_to_3p<- cumsum(introns.length+exons.length[-1])
introns.length_to_end <- mRNA.length-introns.length_to_3p
plotGen <- function(mRNA.length=mRNA.length,
exons.length=exons.length,
introns.length=introns.length,
introns.length_to_3p=introns.length_to_3p){
plot(c(0,mRNA.length),c(-.25,.25),type = "n",xlab = "kb",ylab = "",axes=FALSE, frame.plot=TRUE,main="Model gene")
axis(1);
box()
rect(0 ,-.2,exons.length[1], .2,col = grey(.5))
lines(c(exons.length[1],exons.length[1]+introns.length[1]),
c(0,0),lwd=4)
for(i in 1:introns.no) {
rect(introns.length_to_3p[i] ,-.2,introns.length_to_3p[i]+exons.length[i+1], .2,col = grey(.5))
if (i<introns.no)
lines(c(introns.length_to_3p[i]+exons.length[i+1],introns.length_to_3p[i+1]),
c(0,0),lwd=4)
}
}
# parameters
k.elong<-3 #kb/min
k.s <- 0.7
k.init <- 6 # #/mins
source(file="model_v1.R")
Tau_introns <- introns.length_to_end/k.elong #splicing period
pfunc<- function(t) 1-exp(-k.s*t) # prob spliced at time t
psi_pred<-sapply(Tau_introns, function(x) 1-pfunc(x))
cell_no <- 100; mRNA_no <- 20
runs<-lapply(as.list(1:cell_no), function(x) runModel(mRNA_no))
all_tpoints<- unlist(lapply(as.list(1:cell_no), function(x)runs[[x]][[1]]$ts))
all_tpoints<-sort(unique(all_tpoints))
mRNA.all_cells <- lapply(as.list(1:cell_no),function(x) runs[[x]][[1]])
Itron1.all_cells <- lapply(as.list(1:cell_no),function(x) runs[[x]][[2]][[1]])
Itron2.all_cells <- lapply(as.list(1:cell_no),function(x) runs[[x]][[2]][[2]])
Itron3.all_cells <- lapply(as.list(1:cell_no),function(x) runs[[x]][[2]][[3]])
mRNA.all_cells <- lapply(as.list(1:cell_no), function(x)
mixTs_dataFrame(df1=as.data.frame(mRNA.all_cells[[x]]),all_tpoints)$val)
Itron1.all_cells <- lapply(as.list(1:cell_no), function(x)
mixTs_dataFrame(df1=as.data.frame(Itron1.all_cells[[x]]),all_tpoints)$val)
Itron2.all_cells <- lapply(as.list(1:cell_no), function(x)
mixTs_dataFrame(df1=as.data.frame(Itron2.all_cells[[x]]),all_tpoints)$val)
Itron3.all_cells <- lapply(as.list(1:cell_no), function(x)
mixTs_dataFrame(df1=as.data.frame(Itron3.all_cells[[x]]),all_tpoints)$val)
mRNA.mean <- rowMeans(matrix(unlist(mRNA.all_cells),ncol = cell_no))
Itron1.mean <- rowMeans(matrix(unlist(Itron1.all_cells),ncol = cell_no))
Itron2.mean <- rowMeans(matrix(unlist(Itron2.all_cells),ncol = cell_no))
Itron3.mean <- rowMeans(matrix(unlist(Itron3.all_cells),ncol = cell_no))
plot(c(0,max(all_tpoints)),c(0,mRNA_no),type = "n",xlab="Time (mins)", ylab="Reads",
main=paste("Single cell vs. average,cell no=",cell_no))
invisible(sapply(1:cell_no, function(x) lines(all_tpoints,mRNA.all_cells[[x]],
col=gray(.2),lwd=.5)))
invisible(sapply(1:cell_no, function(x) lines(all_tpoints,Itron1.all_cells[[x]],
col="pink",lwd=.5)))
invisible(sapply(1:cell_no, function(x) lines(all_tpoints,Itron2.all_cells[[x]],
col="darkseagreen1",lwd=.5)))
invisible(sapply(1:cell_no, function(x) lines(all_tpoints,Itron3.all_cells[[x]],
col="lightskyblue",lwd=.5)))
lines(all_tpoints,mRNA.mean,lwd=3)
lines(all_tpoints,Itron1.mean,col=2,lwd=3)
lines(all_tpoints,Itron2.mean,col=3,lwd=3)
lines(all_tpoints,Itron3.mean,col=4,lwd=3)
for(i in 1:3) points(all_tpoints[length(all_tpoints)],psi_pred[i]*mRNA_no,cex=2,col=i+1,pch=16)
legend(0,20,legend = c("mRNA mean","Intron1 mean","predicted Intron1"),lty=c(1,1,NA),col=c(1,2,2),pch=c(NA,NA,16))
#abline(-mRNA.length/k.elong*k.init,k.init,lty=2,col=4,lwd=2)
#abline(-mRNA.length/k.elong*(1/k.init+mRNA.length/k.elong),1/(1/k.init+mRNA.length/k.elong),lty=2,col=3,lwd=2)
install.packages("ReacTran")
library(ReacTram)
library(ReacTran)
Grid <- setup.grid.1D(N = 1000, L = 10)
r <- setup.prop.1D(grid = Grid, func = function(r) r)
r2 <- setup.prop.1D(grid = Grid, func = function(r) r^2)
pde1D <- function(t, C, parms, A = 1) {
tran <- tran.1D(C = C, A = A, D = D, C.down = Cext,
dx = Grid)$dC
list(tran - Q)
}
?tran.1D
D <- 1
Q <- 1
Cext <- 20
D <- 1;Q <- 1;Cext <- 20
require(deSolve)
times <- seq(0, 100, by = 1)
system.time(
out <- ode.1D(y = rep(1, Grid$N), times = times, func = pde1D,
parms = NULL, nspec = 1, A = r2)
)
image(out, grid = Grid$x.mid, xlab = "time, days",
ylab = "Distance, cm", main = "PDE", add.contour = TRUE)
?ode.1D
head(out)
head(out[,1:4])
head(Grid$x.mid)
dim(out)
dim(apply(out[,-1], 1, sum))
length(apply(out[,-1], 1, sum))
plot(out[,1],apply(out[,-1], 1, sum),type='l')
exons.length<- c(.1,.1,.1,.1) #kb
introns.length<-c(1,1,1)# kb
introns.no<-length(introns.length);exons.no <- length(exons.length)
mRNA.length <- sum(exons.length,introns.length)
introns.length_to_3p<- cumsum(introns.length+exons.length[-1])
introns.length_to_end <- mRNA.length-introns.length_to_3p
k.elong<-3 #kb/min
k.s <- 0.7
k.init <- 6 # #/mins
run1<-runModel(10,T,T)
source(file="model_v1.R")
introns.5p <- c(101,1201,2301)/1000
introns.3p <- c(1100,2200,4300)/1000
introns.3p-introns.5p +1
introns.3p-introns.5p +.001
introns.3p <- c(1100,2200,3300)/1000
introns.3p-introns.5p +.001
mRNA.length <- 3.4
mRNA.length <- mRNA.3p - mRNA.5p + .001
mRNA.5p <- 1/1000; mRNA.3p <- 3400/1000
mRNA.length <- mRNA.3p - mRNA.5p + .001
source("model_v2.R")
?Sys.sleep
load("./qz1.RData")
load(file="./qz1.RData")
?load
setwd('~/Documents/GitHub_Frank/yelp_project/')
load(file="./qz1.RData")
folder.main <- '~/Dropbox/coursera/Bigdata_tracker/10_capstone_1015/'
folder.data <- paste(folder.main,'data/',sep = "")
files.names <- dir(folder.data)
data.files <-grep(".json",files.names,value = T)
data.files
?knit
?knitr
include("knitr")
library("knitr")
?knit_theme
knit_theme$get()
library("knitr")
thm <- knit_theme("autumn")
knit_theme()
knit_theme
thm <- knit_theme$get("autumn")
source('~/Documents/GitHub_Frank/yelp_project/knitr_customize.R')
themes = knit_theme$get()
pat_brew()  # use brew patterns <%  %>
for (theme in themes) knit('theme.brew', paste('theme-', theme, '.Rhtml', sep = ''))
thems
themes
source('~/Documents/GitHub_Frank/yelp_project/knitr_customize.R')
for (theme in themes) knit('theme.brew', paste('theme-', theme, '.Rhtml', sep = ''))
thm <- knit_theme$get("solarized-dark")
knit_theme$set(thm)
knit_theme$get()
knit_theme$get("autumn")
knit_theme$get("autumn")
library("knitr")
knit_theme$get("autumn")
?"knit_theme"
library("ktable")
library("knitr")
knitr::kable
?kable
kable(data.files <-grep(".json",files.names,value = T))
?kable
line.numbers<-sapply(data.files, function(x)
system(paste("wc -l ",paste(folder.data,x,sep="")),intern = T))
line.numbers
line.numbers<-sapply(data.files, function(x)
system(paste("wc -l < ",paste(folder.data,x,sep="")),intern = T))
line.numbers
library(printr)
install.packages("printr")
library(printr)
install.packages("printr")
install.packages(
'printr',
type = 'source',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
library(printr)
line.numbers
head(line.numbers)
as.numeric(line.numbers)
as.data.frame(line.numbers)
load("./qz1.RData")
load("./qz1.RData")
business.line_1
+ States
+ States
tip.line_1000
review.files <- grep("review",data.files,value = T)
con <- file(paste(folder.data,review.files,sep = ""),"r")
lines_100 <- readLines(con, 100) ## Read the first line of text
lines_100
business.no <-as.numeric(str_match(
string = grep("business",line.numbers,value = T)[[1]],pattern = "[0-9]+"))
library(rjson)
business.no <-as.numeric(str_match(
string = grep("business",line.numbers,value = T)[[1]],pattern = "[0-9]+"))
library(stringr)
business.no <-as.numeric(str_match(
string = grep("business",line.numbers,value = T)[[1]],pattern = "[0-9]+"))
business.no
tmp<-fromJSON(business.line_1)
tmp
names(tmp)
business.wifi_clean
names(tmp)
business.line_1 <- readLines(con, 1) ## Read the first line of text
tmp2<-fromJSON(business.line_1)
names(tmp2)
tmp2$type
tmp1$type
tmp$type
business.line_1
business.no
